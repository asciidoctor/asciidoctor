plugins:
- rubocop-minitest
- rubocop-rake
AllCops:
  NewCops: enable
  TargetRubyVersion: 2.7
Gemspec/RequireMFA:
  Enabled: false
Layout/ArgumentAlignment:
  EnforcedStyle: with_fixed_indentation
Layout/CaseIndentation:
  EnforcedStyle: end
Layout/EndOfLine:
  EnforcedStyle: lf
Layout/EmptyLineAfterGuardClause:
  Enabled: false # reason: unnecessary extra space
Layout/EmptyLinesAfterModuleInclusion:
  Enabled: false # reason: no
Layout/HeredocIndentation:
  Enabled: false # reason: makes it harder to understand what indentation is significant
Layout/IndentationWidth:
  AllowedPatterns: ['^module Asciidoctor$'] # FIXME keep and remove indentation in CLI, Timings, and API, or remove and fix indentation
Layout/LeadingCommentSpace:
  Enabled: false # reason: this is just nitpicky
Layout/LineLength:
  Enabled: false # FIXME enable me
Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented
Layout/MultilineOperationIndentation:
  EnforcedStyle: indented
Layout/ParameterAlignment:
  EnforcedStyle: with_fixed_indentation
  IndentationWidth: 4
Layout/SpaceAroundOperators:
  EnforcedStyleForExponentOperator: space
Layout/SpaceInsideBlockBraces:
  SpaceBeforeBlockParameters: false
Lint/AmbiguousOperatorPrecedence:
  Enabled: false
Lint/ConstantDefinitionInBlock:
  Exclude: [ test/*.rb ]
Lint/EmptyWhen:
  Enabled: false # reason: an empty when can be important for excluding matches
Lint/LiteralAssignmentInCondition:
  Enabled: false # reason: we know what we're doing; sometimes it's necessary to assign a literal value
Lint/MissingSuper:
  Enabled: false # FIXME consider enabling
Lint/NonAtomicFileOperation:
  Exclude: [ test/*.rb ]
Lint/ParenthesesAsGroupedExpression:
  Enabled: false # reason: we prefer to enclose assignments
Lint/UnusedMethodArgument:
  Enabled: false # reason: these are important for defining API methods
Metrics/AbcSize:
  Enabled: false
Metrics/BlockLength:
  Enabled: false
Metrics/BlockNesting:
  Max: 10
Metrics/ClassLength:
  Enabled: false
Metrics/CyclomaticComplexity:
  Enabled: false
Metrics/MethodLength:
  Enabled: false
Metrics/ModuleLength:
  Enabled: false
Metrics/ParameterLists:
  Max: 10
  MaxOptionalParameters: 10
Metrics/PerceivedComplexity:
  Enabled: false
Minitest/AssertInDelta:
  Enabled: false
Minitest/AssertOperator:
  Enabled: false # reason: makes test hard to read
Minitest/AssertPredicate:
  Enabled: false # reason: I simply don't prefer this style
Minitest/AssertRaisesCompoundBody:
  Enabled: false # reason: dumb rule
Minitest/EmptyLineBeforeAssertionMethods:
  Enabled: false # reason: just no
Minitest/MultipleAssertions:
  Enabled: false
Minitest/RefutePredicate:
  Enabled: false # reason: I simply don't prefer this style
Naming/ConstantName:
  Enabled: false # FIXME consider reenabling
Naming/HeredocDelimiterNaming:
  Enabled: false # reason: EOS is meaningful
Naming/InclusiveLanguage:
  Enabled: true
Naming/PredicateMethod:
  Enabled: false # reason: we like the style we use
Naming/PredicatePrefix:
  Enabled: false # FIXME consider reenabling later (might impact API)
Naming/VariableNumber:
  Enabled: false # reason: this is just nitpicky
Style/AccessorGrouping:
  EnforcedStyle: separated
Style/Alias:
  EnforcedStyle: prefer_alias
Style/Attr:
  Enabled: false # reason: gets confused with the attr method in our API
Style/BlockDelimiters:
  EnforcedStyle: line_count_based # FIXME we want this to be line_count_based except when chaining
Style/CaseEquality:
  Enabled: false # reason: === is a useful operator
Style/CharacterLiteral:
  Enabled: false # reason: ? can make single characters easier to type
Style/ClassAndModuleChildren:
  Enabled: false # reason: both forms are useful
Style/ClassVars:
  Enabled: false # reason: an important language feature
Style/CommandLiteral:
  EnforcedStyle: percent_x
Style/CommentAnnotation:
  Keywords:
  - TODO
  - FIXME
  - HACK
  - NOTE
  - QUESTION
  RequireColon: false
Style/ConditionalAssignment:
  EnforcedStyle: assign_inside_condition
  IncludeTernaryExpressions: false
Style/Documentation:
  Enabled: false # FIXME reenable
Style/EmptyStringInsideInterpolation:
  Enabled: false # reason: wtf not?
Style/ExplicitBlockArgument:
  Enabled: false # reason: yield is fine
Style/FetchEnvVar:
  Enabled: false # reason: just no
Style/FileNull:
  Enabled: false # reason: our /dev/null is not a real device
Style/FormatString:
  EnforcedStyle: sprintf
Style/FormatStringToken:
  EnforcedStyle: unannotated
Style/GuardClause:
  Exclude: [ lib/asciidoctor/substitutors.rb ]
Style/HashAsLastArrayItem:
  EnforcedStyle: no_braces
Style/HashSyntax:
  EnforcedStyle: ruby19
Style/IfWithBooleanLiteralBranches:
  AllowedMethods:
  - empty?
  - nil_or_empty?
Style/IfUnlessModifier:
  Enabled: false # reason: this gets crazy
Style/IfUnlessModifierOfIfUnless:
  Enabled: false # reason: we prefer this style to avoid extra nesting
Style/InfiniteLoop:
  Enabled: false # reason: loop is measurably slower than while true
Style/MethodCallWithArgsParentheses:
  Enabled: true
  EnforcedStyle: omit_parentheses
Style/MethodDefParentheses:
  EnforcedStyle: require_no_parentheses
Style/MultilineBlockChain:
  Enabled: false # reason: no reason not to allow method call on block result
Style/MultilineIfModifier:
  Enabled: false # reason: we prefer this style to avoid extra nesting
Style/MultilineTernaryOperator:
  Enabled: false # reason: a ternary is a ternary
Style/MultipleComparison:
  Enabled: false # reason: faster than the alternative of using Array#include?
Style/MutableConstant:
  Enabled: false # reason: freezing constants is pendantic
Style/NestedTernaryOperator:
  Enabled: false # reason: a ternary is a ternary
Style/NumericLiterals:
  Enabled: false # reason: makes large numbers unreadable and harder to copy
Style/NumericPredicate:
  EnforcedStyle: comparison
Style/ObjectThen:
  Enabled: false # reason: not yet available in minimum JRuby version
Style/OptionalBooleanParameter:
  Enabled: false # reason: invasive
Style/ParallelAssignment:
  Enabled: false # reason: an important language feature
Style/PercentLiteralDelimiters:
  PreferredDelimiters:
    default: "()"
    "%i": "()"
    "%r": "//"
    "%w": "()"
    "%W": "()"
Style/PerlBackrefs:
  Enabled: false # reason: an important language feature
Style/RedundantBegin:
  Exclude: [ test/*.rb ] # TODO remove once support for Ruby < 2.5 is dropped; rule does not allow exception for blocks
Style/RedundantHeredocDelimiterQuotes:
  Enabled: false # reason: we know what we are doing
Style/RedundantParentheses:
  Enabled: false # reason: sometimes the parentheses just make it clearer; this rule is too aggressive
Style/RedundantPercentQ:
  Enabled: false # reason: needed to escape strings with both single and double quotes
Style/RedundantSelfAssignmentBranch:
  Enabled: false # reason: sometimes the result is just to make no change
Style/RedundantStringEscape:
  Enabled: false # reason: this rule crashes RuboCop
Style/RegexpLiteral:
  Exclude: [ test/*.rb ]
Style/RescueModifier:
  Enabled: false # reason: a useful language feature
Style/RescueStandardError:
  EnforcedStyle: implicit
Style/ReturnNilInPredicateMethodDefinition:
  Enabled: false # reason: we prefer to return nil instead of false sometimes
Style/SafeNavigation:
  Enabled: false # FIXME reenable in Asciidoctor 3
Style/SlicingWithRange:
  Enabled: false # reason: we don't want to use [1..] yet
Style/SoleNestedConditional:
  Enabled: false # FIXME reenable to catch some helpful fixes, but causes RuboCop to crash
Style/SpecialGlobalVars:
  EnforcedStyle: use_perl_names
Style/StderrPuts:
  Exclude: [ lib/asciidoctor/cli/options.rb ]
Style/StringConcatenation:
  Enabled: false # reason: string concatenation can be faster
Style/SuperWithArgsParentheses:
  Enabled: false # reason: hate it
Style/SymbolArray:
  EnforcedStyle: brackets
Style/SymbolProc:
  Enabled: false # reason: using a symbol proc is measurably slower than using a block in Opal and Ruby < 3
Style/TernaryParentheses:
  Enabled: false # reason: this rule has become too buggy and gets it wrong most of the time
  EnforcedStyle: require_parentheses_when_complex
Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: consistent_comma
Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: consistent_comma
